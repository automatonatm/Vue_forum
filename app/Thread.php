<?php

namespace App;

use App\Entities\Threading;

use Illuminate\Database\Eloquent\Model;
use Laravel\Scout\Searchable;

class Thread extends Model
{
    use Threading, RecordActivity, RecordsViews, Searchable;

    protected $guarded = [],
              $with = ['channel', 'user'],
              $appends = ['isSubscribedTo'];

    protected  $casts = [
                    'locked' => 'boolean'
                 ];





    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub



        //Model Events
     /* static::deleting(function ($thread) {
            $thread->replies()->delete();
        });

      //*/

        static::deleting(function ($thread) {

            $thread->replies->each->delete();
        });



        static::created(function ($thread) {
            $thread->update(['slug' => $thread->title]);
        });



    }

    public function replies()
    {
        return $this->hasMany(Reply::class);
    }


    public function user()
    {
        return $this->belongsTo(User::class);

    }

    public function channel()
    {
        return $this->belongsTo(Channel::class);

    }

    public function subscribe($user_id = null)
    {
        $this->subscriptions()->create([
            'user_id' => $user_id ? : auth()->id()
        ]);

        return $this;
    }

    public function unsubscribe($user_id = null)
    {
        $this->subscriptions()
            ->where('user_id', $user_id ?: auth()->id())
            ->delete();
    }

    public function path()
    {

       return "/threads/channel/{$this->channel->slug}/{$this->slug}";

    }

    public function subscriptions()
    {
        return $this->hasMany(ThreadSubcription::class);
    }


    public function getIsSubscribedToAttribute()
    {
        //check if its exists
        return $this->subscriptions()
            ->where('user_id', auth()->id())
            ->exists();
    }

    public function getRouteKeyName()
    {
        return 'slug';
    }

    public function setSlugAttribute($value)
    {

        $slug = str_slug($value);



        if (static::whereSlug($slug)->exists()){
            $slug = "{$slug}-". $this->id;
        }


        $this->attributes['slug'] = $slug;

        /*if(static::whereSlug($slug = str_slug($value))->exists()) {
            $slug = $this->incrementSlug($slug);
        }*/
    }

    public function incrementSlug(string $slug, int  $count = 2)
    {
        $original = $slug;

        while (static::whereSlug($slug)->exists()){
            $slug = "{$original}-".$count++;
        }

        return $slug;
       /* $max = static::whereTitle($this->title)->latest('id')->value('slug');

        if(is_numeric($max[-1])) {
            return preg_replace_callback('/(\d+)$/', function ($matches) {
                return $matches[1] +1;
            }, $max);
        }
        return "{$slug}-2";*/
    }

}
